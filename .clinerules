
## サービス概要
このサービスは、ユーザーが日常生活や人生の中で直面する様々なイベントやタスクを効率的に管理し、AIの力を活用してより良い意思決定を支援するプラットフォームです。ユーザーが気づきにくい「やるべきこと」を提案し、生活全体の最適化を目指します。

---

## 達成したいミッション

### 1. **ユーザーの生活の複雑性を軽減**
現代生活は、仕事、家族、健康、行政手続きなど、多岐にわたるタスクやイベントで溢れています。このサービスは、それらを一元管理し、必要なアクションを提案することで、ユーザーの心理的負担を軽減します。

### 2. **AIを活用したパーソナライズドサポート**
ユーザーごとのライフスタイルや目標に応じた個別提案を行い、より良い意思決定を支援します。これにより、ユーザーが自身の目標に向けた具体的なステップを踏めるようサポートします。

### 3. **人生の見える化と行動の促進**
ユーザーが自分の生活を俯瞰し、未来に向けた行動を計画的に進められるようにします。これにより、短期的なタスク管理だけでなく、長期的な目標達成を支援します。

---

## 解決したい課題

### 1. **日常生活の煩雑さ**
多くの人が日々のタスクやイベントに埋もれ、重要なことを後回しにしてしまう問題を解決します。例として以下が挙げられます：
- 健康診断の予約忘れ
- 行政手続きの遅れ
- 家族や友人との大切なイベントの見落とし

### 2. **計画の欠如によるストレス**
日々の忙しさの中で、計画的に行動できず、結果として非効率な生活を送る人々の課題を解消します。特に以下のようなケースに対応します：
- 資格取得やキャリアアップのための計画立案ができない
- 引っ越しや新生活開始時の手続きの煩雑さ

### 3. **意思決定の難しさ**
現代は選択肢が多すぎる時代です。このサービスは、ユーザーが最適な選択を行えるようAIを活用してサポートします。例えば：
- ライフイベントごとの「やるべきことリスト」の提供
- 健康やキャリアにおける次の一手の提案



---

## このサービスが目指す世界

### 1. **個々人がより充実した生活を送れる世界**
ユーザーは、日常の忙しさに追われることなく、自分の人生を主体的にデザインできるようになります。

### 2. **行動が促進される世界**
ユーザーが未来に向けた行動を自然と取りたくなる仕組みを提供し、結果的に目標達成を容易にします。

### 3. **テクノロジーが人間に寄り添う世界**
AIがユーザーの生活に溶け込み、負担を軽減しつつ、幸福度を高める存在として機能する世界を目指します。

---

---

## サービスがもたらす社会的インパクト

### 1. **健康意識の向上**
健康診断や予防医療の受診率を向上させることで、医療費削減や健康寿命の延伸に寄与します。

### 2. **行政手続きの効率化**
ユーザーが行政手続きを効率的に行えるよう支援し、住民と行政双方の負担を軽減します。

### 3. **孤独やストレスの軽減**
AIやコミュニティ機能を通じて、ユーザーの孤独感を減らし、メンタルヘルスの向上を促進します。

### 4. **生産性の向上**
生活の煩雑さを軽減し、ユーザーが本来集中すべき目標や価値ある活動に注力できる環境を提供します。

---

## 最終的なビジョン
「生活を最適化する知的な伴走者」としてのサービスを提供し、ユーザーが充実した生活を送れる未来を共に創る。人間とテクノロジーが共存し、相互に補完し合う世界を目指します。

--------------------

### サービスの要件
このサービスは、以下の要件を満たすことを目的としています：

1. **目的**
   - ユーザーがライフイベントやタスクを簡単に管理できるアプリケーションを提供します。
   - AI機能を利用し、ユーザーにパーソナライズされた提案やサポートを提供します。
   - Firebase Authenticationの匿名認証を用いて、ユーザーが簡単に利用を開始できるようにします。

2. **クライアント**
   - Flutterアプリ。
   - Firebase SDKを使用してFirestoreのRead/Write操作を直接行います。

3. **サーバーサイド**
   - APIは主にAI機能を利用するユースケースで使用します。
   - クライアントからのリクエストは、Firebase Authenticationを使用して認証済みのユーザーに限定します。

4. **データ構造（Firestore）**
   - Firestoreのコレクションとスキーマは以下の通りです：

     - **Users**:
       - `uid`: ユーザーID（文字列）
       - `createdAt`: 作成日時（ISO8601形式の文字列）
       - `lastLogin`: 最終ログイン日時（ISO8601形式の文字列）

     - **Tasks**:
       - `id`: タスクID（文字列）
       - `userId`: ユーザーID（文字列）
       - `title`: タスクのタイトル（文字列）
       - `description`: タスクの説明（文字列、任意）
       - `dueDate`: 締切日時（ISO8601形式の文字列、任意）
       - `completed`: 完了フラグ（ブール値、デフォルトで`false`）

     - **AIRequests**:
       - `id`: リクエストID（文字列）
       - `userId`: ユーザーID（文字列）
       - `request`: リクエスト内容（文字列）
       - `response`: レスポンス内容（文字列、任意）
       - `createdAt`: 作成日時（ISO8601形式の文字列）

5. **APIエンドポイント**
   以下のエンドポイントを実装してください：

   - **AI機能のリクエスト処理**: `/ai/process`
     - 入力データ（`input`）を受け取り、AIを使用して結果を生成します。
     - 処理結果をFirestoreの`AIRequests`コレクションに保存し、結果を返します。

   - **AIリクエスト履歴の取得**: `/ai-requests`
     - 現在のユーザーが過去に行ったAIリクエストの履歴を取得します。

   - **タスク管理**: `/tasks`
     - ユーザーのタスク一覧を取得、作成、更新、削除するためのエンドポイントを提供します。
     - 例：
       - **GET `/tasks`**: タスクの一覧を取得。
       - **POST `/tasks`**: 新しいタスクを作成。
       - **PUT `/tasks/:id`**: 既存のタスクを更新。
       - **DELETE `/tasks/:id`**: タスクを削除。

### 実装上のポイント
1. **認証**
   - Firebase Authenticationを利用し、APIリクエストの際にトークン検証を行います。
   - 未認証のユーザーからのリクエストは拒否してください。

2. **データ検証**
   - `zod`を使用してFirestoreのスキーマを定義し、リクエストデータの型チェックを行ってください。

3. **エラーハンドリング**
   - 不正なデータやエラー時には、適切なHTTPステータスコードとエラーメッセージを返してください。

4. **AI機能**
   - AI機能部分はモックで構いませんが、リクエスト内容を元にレスポンスを生成し、Firestoreに保存してください。

5. **拡張性**
   - 将来的に新しいAIユースケースやデータモデルを追加できるよう、コードをモジュール化してください。

### 出力内容
- Express + TypeScriptによるサーバーサイドのコード。
- 各エンドポイントの具体的な実装例。
- Firestoreの型定義（`zod`を使用）。
- Firebase Authのトークン検証ミドルウェアの実装。

## その他の規約
- 新しいclassの追加、関数の追加、エラーの解消、リファクタリングの完了などタスクの完了ごとに変更点をgit add して、git commitして記録を残してください